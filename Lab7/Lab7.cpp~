//jeff cpp for peg solitaire
//
//
//

#include <sstream>
#include "SeparateChaining.h"
#include "SeparateChaining.cpp"
#include <iostream>
#include <algorithm>
#include <string>
#include <cstdlib>
#include <list>

using namespace std;


bool isvalidboard(int x, string board);
bool isvalidmove(int x, string board);
bool isvalidplacement(int x, int side);
string initialize_board(string board, vector <int> pegs);
bool solved(string s);
bool solve(string board, list<vector<int>> mseq);
vector <vector<int>> next_moves(string board);
string makeMove(string board, vector<int> move);
//bool hsolve(string board, list<int> mseq, Hashtable & H);
vector <int> tokenizer(string input);
int count_pegs (string board);
//bool check_h (string board, Hashtable & H);
//bool check_proper_to(int x, string board);



int main(int argc, char  * argv[]) {
	string board;
	
	for (int i = 0; i < 49; i++) {
		board.append("0");
	}
	
	int x;
	string first_pegs = "2 3 4 8 9 10 11 14 15 16 17 18 19 20 21 22 23 25 26 27 28 29 30 31 32 33 34 37 38 39 44 45 46";
  string test_wing = " 4 ";
	//cout << "where would you like the pegs to begin? : " << endl;
	//cin >> first_pegs;
	vector <int> v = tokenizer(first_pegs);
  vector <int> b = tokenizer(test_wing);

	//for (int i = 0; i < v.size(); ++i) {
	  // cout << v[i];
	  //cout << endl;
	//}
	board = initialize_board(board, v);
  //board = initialize_board(board, b);
	cout << board << endl;
	cout << board.length() << endl;
	cout << count_pegs(board) << endl;
	list <vector<int>> mseq;
	//vector <int> first_moves{26, 25, 24};
	//string board3;
	//board3 = makeMove(board, first_moves);
	if (solve(board, mseq)) { cout << " you did it! " << endl;}
	//creat insance of hashtable to pass
  //HashTable<vector<string>> * H = new HashTable;
  //hsolve(board, mseq, H);
  return 0;
}


//bool check_h (string board, HashTable & H) {}




int count_pegs (string board) {
  string _check = board.c_str();
  int counter = 0;
  for (int i = 0; i < board.size(); ++i) {
    if(board[i] == '1') {
      counter++;
      //cout << counter;
    }
  }
  return counter;
}


//super hardcoded logic to make sure peg is playable, 
//all values are outside the scope of the board
bool isvalidboard (int x, string board) {
  if (x < 0) {return false;}
  if (x == 0) {return false;}
  if (x == 1) {return false;}
  if (x == 5) {return false;}
  if (x == 6) {return false;}
  if (x == 7) {return false;}
  if (x == 8) {return false;}
  if (x == 12) {return false;}
  if (x == 13) {return false;}
  if (x == 35) {return false;}
  if (x == 36) {return false;}
  if (x == 40) {return false;}
  if (x == 41) {return false;}
  if (x == 42) {return false;}
  if (x == 43) {return false;}
  if (x == 47) {return false;}
  if (x == 48) {return false;}
  if (x > 49) {return false;}
  else {
    return true;
  }
}

bool isvalidmove (int x, string board) {
  if (!isvalidboard(x, board)) {return false;}
  else if (board[x] == '0') {return false;}
  return true; 
}

//initializes the values of board, with pegs and empty spots
//calls isvalid to keep in playable board area
string initialize_board (string board, vector<int> pegs) {
  //string::iterator it;
  //cout << pegs << endl;
  for (int i = 0; i < pegs.size(); ++i) {
    int temp = pegs[i];
    if (isvalidboard(temp, board)) {
      board.insert(board.begin()+temp,'1');
      board.resize(49);
    }
  }
  return board;
}


//boolean to return true if the game is done
bool solved (string s) {
  if (count_pegs(s) == 1) {
    cout << "idk why its winning" << endl;
    return true;
  }
  else {
    return false;
  }
}

bool isvalidplacement (int x, int side) {
  if (side == 1) { //right side
    if (x == 19) { return false;}
    if (x == 20) { return false;}
    if (x == 26) { return false;}
    if (x == 27) { return false;}
  }
  else if (side == 0) { //left side
    if (x == 21) { return false;}
    if (x == 22) { return false;}
    if (x == 28) { return false;}
    if (x == 29) { return false;}
  }
  return true;
}


vector <vector <int>> next_moves(string board) {
  vector <vector <int>> NMOVES;
  for (int i = 0; i < board.size(); i++) {
    if (board[i] == '0') {
      //if (!isvalidboard(i, board)) {return NMOVES;}
      vector <int> _moves (3, 0);
      //test for moves "below" the open peg slot
      if (isvalidmove(i+14, board) && isvalidmove(i+7, board)) {
        _moves[2] = i;
        _moves[0] = i+14;
        _moves[1] = i+7;
        NMOVES.push_back(_moves);
      }
      //test for "above" the open slot
      if (isvalidmove(i-14, board) && isvalidmove(i-7, board)) {
        _moves[2] = i;
        _moves[0] = i-14;
        _moves[1] = i-7;
        NMOVES.push_back(_moves);
      }
      //test to right of slot
      if (isvalidmove(i+2, board) && isvalidplacement(i, 1)) {
        _moves[2] = i;
        _moves[0] = i+2;
        _moves[1] = i+1;
        NMOVES.push_back(_moves);
      }
      //test to the left of slot
      if (isvalidmove(i-2, board) && isvalidplacement(i, 0)) {
        _moves[2] = i;
        _moves[0] = i-2;
        _moves[1] = i-1;
        NMOVES.push_back(_moves);
      }
    }
  }
  return NMOVES;
}

string makeMove(string board, vector<int> move) {
  //makethe move requested in the vector, assume move is valid, testing for validity when building the move vector
  string copy_board;
  int from = move[0]; cout << from << endl;
  int mid = move[1]; cout << mid << endl;
  int to = move[2]; cout << to << endl;
  copy_board.assign(board);
  cout << "copy_board 1: " << copy_board << endl;
  copy_board.replace(from, 1, "0");
  copy_board.replace(mid, 1, "0");
  copy_board.replace(to, 1, "1");
  cout << copy_board.size() << endl;
  cout << "copy board 2: " << copy_board << endl;
  return copy_board;
}



//solve is main solving function, using DFS
bool solve (string board, list<vector<int>> mseq) {
  if (solved(board))
    return true;
  vector <vector <int>> current_moves = next_moves(board);
  for (int i = 0; i < current_moves.size(); ++i) {
      string board2 = makeMove(board, current_moves[i]);
      if (solve(board2, mseq)) {
      //cout << "coming into here? " << endl;
      //vector <int> c_move = current_moves[i]; 
        mseq.push_front(current_moves[i]);
        return true;
      }
    
  }
  return false;
}


/*
bool hsolve(string board, list<int> mseq, HashTable & H) {
  if (solved(board))
    return true;
  vector <vector <int>> current_moves = next_moves(board);
  for (int i = 0; i < current_moves.size(); ++i) {
    string board2 = makeMove(board, current_moves[i]);
    if (check_h(board, H)) {
      if (hsolve(board2, mseq, H)) {
        mseq.push_front(current_moves[i][i]);
        return true;
      }
      else {
        H.insert(board);
      }
    }
  }
  return false;
}
*/

vector <int> tokenizer (string input) {
  vector <int> tokens;
  stringstream S;
  S << input;
  int j;
  char c;
  while (S >> c) {
    if (isdigit(c)) {
      S.putback(c);
      S >> j;
      tokens.push_back(j);
    }
    //for (int i = 0; i < tokens.size(); ++i) { cout << tokens[i] << endl; }
  }
  return tokens;
}
